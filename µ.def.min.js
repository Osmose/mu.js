// Simple deferred implementation.
// Usage:
// var def = new µ.def();
// def.onpass(yay).onpass(dance).onfail(boo);
// def.pass('party'); // yay() and dance() are called with 'party'
µ.def=function(){var a={},b=this;["pass","fail"].forEach(function(c){a[c]=[],b["on"+c]=function(d){return a[c].push(d),b},b[c]=function(){var d=µ.arg(arguments);a[c].forEach(function(a){a.apply(!1,d)}),b.result=c}})},µ.when=function(){function e(b){return function(e){arguments.length>1?c[b]=µ.arg(arguments):c[b]=e,--d<1&&a.pass(c)}}function f(){a.fail(arguments)}var a=newµ.def,b=µ.arg(arguments),c=[],d=b.length;return setTimeout(function(){for(var a=0;a<b.length;a++){var c=b[a];c instanceof µ.def?c.onpass(e(a)).onfail(f):e(a)(c)}},0),a};